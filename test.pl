#!/usr/bin/perl

use warnings;
use strict;


### unit test for gncttr.pl


# define global variable for test mode


# include module global
use lib '/home/clara/Projekte/CCApredictor/gncttr/'; # search for moduls into cwd
use CM::GNCTTR::global qw($genom $seq $minsize $tmp $model $header $limit %starts %stops);
use CM::GNCTTR::codons qw(finds codon translate);
use CM::GNCTTR::hmm qw(nofltest compare);
use CM::GNCTTR::cds qw(cds);


# variables equal?
use Test::Simple tests => 16; # use n test

# testing variable
my %dummy = (
">360 - 1272\nLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*HSKRTSPAVT*" => 106.5,
">30 - 1272\n2VRDGLLGLPVRERDFVVVGSDVATMIDQGFTQVGKDFPVFLHPETKEEYALARTERKSAPGYHGFVVHADPLVTLEEDLARRDLTINALAQDAEGRIIDPFGGQADLHARLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*HSKRTSPAVT*" => 198.1,
">399 - 1272\nVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*" => 88.7,
">360 - 1272\nLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*" => 106.6,
">15 - 1272\nLVGGAVRDGLLGLPVRERDFVVVGSDVATMIDQGFTQVGKDFPVFLHPETKEEYALARTERKSAPGYHGFVVHADPLVTLEEDLARRDLTINALAQDAEGRIIDPFGGQADLHARLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*HSKRTSPAVT*PSMPSPRTPRVASLILSAVRPIFTRACCAMSPRPLPKTRCAFCAWRALPPASMRSGLAPHPRRRR*" => 210.3,
">225 - 1272\nVVHADPLVTLEEDLARRDLTINALAQDAEGRIIDPFGGQADLHARLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*HSKRTSPAVT*PSMPSPRTPRVASLILSAVRPIFTRACCAMSPRPLPKTRCAFCAWRALPPASMRSGLAPHPRRRR*" => 167.0,
">15 - 1272\nLVGGAVRDGLLGLPVRERDFVVVGSDVATMIDQGFTQVGKDFPVFLHPETKEEYALARTERKSAPGYHGFVVHADPLVTLEEDLARRDLTINALAQDAEGRIIDPFGGQADLHARLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*HSKRTSPAVT*PSMPSPRTPRVASLILSAVRPIFTRACCAMSPRPLPKTRCAFCAWRALPPASMRSGLAPHPRRRR*CARWSPPARSMRSSPIAFGRN*AAPWAKHARRGFSRNCATAEH*" => 209.9,
">30 - 1239\nVRDGLLGLPVRERDFVVVGSDVATMIDQGFTQVGKDFPVFLHPETKEEYALARTERKSAPGYHGFVVHADPLVTLEEDLARRDLTINALAQDAEGRIIDPFGGQADLHARLLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*" => 198.2,
">363 - 1272\nLRHVSPAFAEDPVRILRVARFAARFDALGFGTAPETAALMREMVAAGEVDALVPDRVWQELSRALGEARPSRFFEELRHCGALKILLPELERLWGVPQPEQWHPEVDTGVHVMMVLDQCARLSDEPEVRFAALCHDLGKGTTPGDVLPSHHGHEERSVELLGQVCQRLPVPTRFSELARVVARYHGKVHKVDELRASTILGVFERVNRFQARALIWLAEPCATDCWACQCASGILWWSAAMSRL*STRALLRLARIFRSFSTPRPKRSMHSRAPSARARPAITALWCMPTLW*HSKRTSPAVT*" => 105.6);

#ok( $minsize == 100, 'minsize is 100 for protein' );


## always test 3 times -> 2 extrem, 1 normal


### test function

## codon
my $cds  = &codon ("GTGGTAGAAAGC"); # nice sequences, divisible by 3
my $longpos = &codon ("GTGGTAGAAAGCGC"); # sequence, not divisible by 3
my $nopos = &codon ("MGTSEILGMLHDHPPSYAPEWGSGGIFGLKYYRGVLYYTLAFDAVSYFITDSGVERYRFE"); # AA sequence instead of nt
 
ok ($$cds{0} eq 'GTG' && $$cds{3} eq 'GTA' && $$cds{6} eq 'GAA' && $$cds{9} eq 'AGC', 'Codon succesful calculated of nice sequence');
ok ($$longpos{0} eq 'GTG' && $$longpos{3} eq 'GTA' && $$longpos{6} eq 'GAA' && $$longpos{9} eq 'AGC' && !defined $$longpos{12}, 'Codon succesful calculated of sequences with uneven nt');
ok (!defined $$nopos{0}, 'no splitting of wrong sequence'); 


## finds
my ($starts, $stops) = &finds(&codon('GGGATGGCTCCCCTCTCTTGGGGTATTGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTTTTGCGGTTGACGCTCGCAGAGGAATCCTCCACGACCCT')); # 1 start + 1 stop codon
my ($multstarts, $multstops) = &finds(&codon('GTGATGGCTATGCTCTCTTTGGGTATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGACCT')); # multiple start & stop codons
my ($nostarts, $nostops) = &finds(&codon('CCCCCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAA')); # no start + no stop codon



ok ($$starts{3} == 1 && $$stops{63} == 1, 'Position for start and stop codon found'); # startcodons & stopcodons
ok ($$multstarts{0} == 1 && $$multstarts{3} == 1 && $$multstarts{9} == 1 && $$multstarts{18} == 1 && $$multstarts{24} == 1 && $$multstarts{87} == 1 && $$multstops{63} == 1 && $$multstops{120} == 1, 'All positions for start and stop codons found');
ok (!keys %$nostarts && !keys %$nostops, 'No false positive assigned start and stop positions');

## cds
my $seq = cds ($starts, '63', '0', &codon('GGGATGGCTCCCCTCTCTTGGGGTATTGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTTTTGCGGTTGACGCTCGCAGAGGAATCCTCCACGACCCT')); # 1 start & 1 stop
my $multseq = cds ($multstarts, '120', '0', &codon('GTGATGGCTATGCTCTCTTTGGGTATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGACCT')); # multiple starts & stops
my $noseq = cds ($nostarts, '0', '0',&codon('CCCCCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAA')); # no start & stop
my $oseq = cds ($nostarts, '28', '0',&codon('CCCCCCCCCGGGGGGGGGGGGGGGGGGTGAGGGGGAAAAAAAAAAAAAAA')); # no start, but stop


ok ((grep 'ATGGCTCCCCTCTCTTGGGGTATTGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGA', values %$seq), 'cut out cds for single startcodon before stopcodon at position 63');
ok ((grep 'GTGATGGCTATGCTCTCTTTGGGTATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGA', values %$multseq && grep 'TTGGGTATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGA', values %$multseq && grep  'ATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGA', values %$multseq &&  grep 'ATGGCTATGCTCTCTTTGGGTATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGA', values %$multseq && grep 'ATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGA', values %$multseq && grep  'ATGCTCTCTTTGGGTATGGAACATACGCTACCAGAACTACCATCCGAGTTTGACTGAAGGGATTTCACGGTTAACAGTATGGCGGTTGACGCTCGCAGAGGAATCCTCCACTGA', values %$multseq), 'cut out cds for multiple startcodon before stopcodon at position 63');
ok (keys %$noseq == 0, 'no wrong cds for unexisting start & stop');
ok (keys %$oseq == 0, 'no wrong cds for stop but no start codon');


## translate 
ok( &translate('TTTTTCTTATTGTCTTCCTCATCGTATTACTAATAGTGTTGCTGATGGCTTCTCCTACTGCCTCCCCCACCGCATCACCAACAGCGTCGCCGACGGATTATCATAATGACTACCACAACGAATAACAAAAAGAGTAGCAGAAGGGTTGTCGTAGTGGCTGCCGCAGCGGATGACGAAGAGGGTGGCGGAGGG') eq 'FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG', 'full-spectrum-translation'); # translate $seq # nice cds, all codons?
ok( &translate('TTTTTNTTATTGTCTTCNNCATCGTATTACTAATAGTGTTGCTGATGGCTTCTCCTACTGCCTCCCCCACCGCATCACCAACNGNGTCGCCGACGGNTTATCATAATGNCTACCACAACGAATAACANNNNGAGTAGCAGAAGGGTTGTCGTAGTGGCTGCCGCAGCGGATGACGAAGAGGGTGGCGGAGGG') eq 'FXLLSXXSYY**CC*WLLLLPPPPHHQXXRRRXIIMXTTTNNXXSSRRVVVVAAAADDEEGGGG', 'missleading translation'); # deformed sequence -> Ns
ok( &translate('weerwerbt*!_$@') eq 0, 'no nucleotide sequence -> no translation'); # no AS at all

## nofltest
my $result = nofltest (">CCAII\nMPNANEDNPNALSQVQRRAVSELLRVSPVADDLARRFQEAGFRLALVGGSVRDALLGRLGNDLDFTTDARPEDVLKIVRPWAEAVWEVGIAFGTVGAQKEGYQIEVTTYRSEAYDRTSRKPEVSYGDSIEEDLVRRDFTVNAMAVALPEKEFIDPHGGLEDLAARVLRTPGTPEASFSDDPLRMMRAARFAAQLDFEVAPEVVAAMTEMAERLDIVSAERVRDELNKLILSAHPRKGLSLLVDTGLADRVLPELPALRLESDEHHRHKDVYEHSLTVLEQAVDLEEDGPDLVLRLAALLHDIGKPRTRRFEPDGRVSFHHHEVVGAKMTKKRLTALKYSNDMVKDVSRLVELHLRFHGYGTGEWTDSAVRRYVRDAGPLLTRLHKLTRSDCTTRNKRKAGALSRAYDGLEQRIAQLQEQEELDAIRPDLDGNEIQEVLGIRPGPAVGRAYKFLLELRLENGPMGHDAAVTALKEWWATQS", "/net/elara/scratch/clara/Doktorarbeit/CCA/CCApredictor/UNIPROT/CCAII/CCAII.hmm");
ok (nofltest (">CCAII\nMPNANEDNPNALSQVQRRAVSELLRVSPVADDLARRFQEAGFRLALVGGSVRDALLGRLGNDLDFTTDARPEDVLKIVRPWAEAVWEVGIAFGTVGAQKEGYQIEVTTYRSEAYDRTSRKPEVSYGDSIEEDLVRRDFTVNAMAVALPEKEFIDPHGGLEDLAARVLRTPGTPEASFSDDPLRMMRAARFAAQLDFEVAPEVVAAMTEMAERLDIVSAERVRDELNKLILSAHPRKGLSLLVDTGLADRVLPELPALRLESDEHHRHKDVYEHSLTVLEQAVDLEEDGPDLVLRLAALLHDIGKPRTRRFEPDGRVSFHHHEVVGAKMTKKRLTALKYSNDMVKDVSRLVELHLRFHGYGTGEWTDSAVRRYVRDAGPLLTRLHKLTRSDCTTRNKRKAGALSRAYDGLEQRIAQLQEQEELDAIRPDLDGNEIQEVLGIRPGPAVGRAYKFLLELRLENGPMGHDAAVTALKEWWATQS", "/net/elara/scratch/clara/Doktorarbeit/CCA/CCApredictor/UNIPROT/CCAII/CCAII.hmm") ne 0, 'HMM of CCAII tested against CCAII sequence'); # CCAII Model vs CCAII sequence
ok (nofltest ('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXADTC' ,"/net/elara/scratch/clara/Doktorarbeit/CCA/CCApredictor/UNIPROT/CCAII/CCAII.hmm") == 0, 'HMM of CCAII tested against nonsense sequence');# CCAII Model vs nonsense sequence


## compare
# compare 2 different scores
# very high/low numbers
